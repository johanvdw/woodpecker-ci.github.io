"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[1774],{49613:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var i=t(59496);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=i.createContext({}),s=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,p=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=s(t),m=l,f=c["".concat(p,".").concat(m)]||c[m]||d[m]||a;return t?i.createElement(f,o(o({ref:n},u),{},{components:t})):i.createElement(f,o({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,o=new Array(a);o[0]=c;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r.mdxType="string"==typeof e?e:l,o[1]=r;for(var s=2;s<a;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},48309:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>k,contentTitle:()=>m,default:()=>b,frontMatter:()=>c,metadata:()=>f,toc:()=>g});var i=t(49613),l=Object.defineProperty,a=Object.defineProperties,o=Object.getOwnPropertyDescriptors,r=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,u=(e,n,t)=>n in e?l(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,d=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&u(e,t,n[t]);if(r)for(var t of r(n))s.call(n,t)&&u(e,t,n[t]);return e};const c={},m="Multi pipelines",f={unversionedId:"usage/multi-pipeline",id:"version-0.15/usage/multi-pipeline",title:"Multi pipelines",description:"This Feature is only available for GitHub, Gitea & GitLab repositories. Follow this issue to support further development.",source:"@site/versioned_docs/version-0.15/20-usage/25-multi-pipeline.md",sourceDirName:"20-usage",slug:"/usage/multi-pipeline",permalink:"/docs/0.15/usage/multi-pipeline",draft:!1,editUrl:"https://github.com/woodpecker-ci/woodpecker/edit/master/docs/versioned_docs/version-0.15/20-usage/25-multi-pipeline.md",tags:[],version:"0.15",sidebarPosition:25,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Conditional Step Execution",permalink:"/docs/0.15/usage/conditional-execution"},next:{title:"Matrix builds",permalink:"/docs/0.15/usage/matrix-builds"}},k={},g=[{value:"Rational",id:"rational",level:2},{value:"Example multi-pipeline definition",id:"example-multi-pipeline-definition",level:2},{value:"Status lines",id:"status-lines",level:2},{value:"Flow control",id:"flow-control",level:2}],y={toc:g};function b(e){var n,t=e,{components:l}=t,u=((e,n)=>{var t={};for(var i in e)p.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(null!=e&&r)for(var i of r(e))n.indexOf(i)<0&&s.call(e,i)&&(t[i]=e[i]);return t})(t,["components"]);return(0,i.kt)("wrapper",(n=d(d({},y),u),a(n,o({components:l,mdxType:"MDXLayout"}))),(0,i.kt)("h1",d({},{id:"multi-pipelines"}),"Multi pipelines"),(0,i.kt)("admonition",d({},{type:"info"}),(0,i.kt)("p",{parentName:"admonition"},"This Feature is only available for GitHub, Gitea & GitLab repositories. Follow ",(0,i.kt)("a",d({parentName:"p"},{href:"https://github.com/woodpecker-ci/woodpecker/issues/131"}),"this")," issue to support further development.")),(0,i.kt)("p",null,"By default, Woodpecker looks for the pipeline definition in ",(0,i.kt)("inlineCode",{parentName:"p"},".woodpecker.yml")," in the project root."),(0,i.kt)("p",null,"The Multi-Pipeline feature allows the pipeline to be split into several files and placed in the ",(0,i.kt)("inlineCode",{parentName:"p"},".woodpecker/")," folder. Only ",(0,i.kt)("inlineCode",{parentName:"p"},".yml")," files will be used and files in any subfolders like ",(0,i.kt)("inlineCode",{parentName:"p"},".woodpecker/sub-folder/test.yml")," will be ignored. You can set some custom path like ",(0,i.kt)("inlineCode",{parentName:"p"},".my-ci/pipelines/")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},".woodpecker/")," in the ",(0,i.kt)("a",d({parentName:"p"},{href:"/docs/0.15/usage/project-settings"}),"project settings"),"."),(0,i.kt)("h2",d({},{id:"rational"}),"Rational"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"faster lint/test feedback, the pipeline doesn't have to run fully to have a lint status pushed to the remote"),(0,i.kt)("li",{parentName:"ul"},"better organization of the pipeline along various concerns: testing, linting, feature apps"),(0,i.kt)("li",{parentName:"ul"},"utilizing more agents to speed up build")),(0,i.kt)("h2",d({},{id:"example-multi-pipeline-definition"}),"Example multi-pipeline definition"),(0,i.kt)("admonition",d({},{type:"warning"}),(0,i.kt)("p",{parentName:"admonition"},"Please note that files are only shared between steps of the same pipeline (see ",(0,i.kt)("a",d({parentName:"p"},{href:"/docs/0.15/usage/pipeline-syntax#file-changes-are-incremental"}),"File changes are incremental"),"). That means you cannot access artifacts e.g. from the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," pipeline below in the ",(0,i.kt)("inlineCode",{parentName:"p"},"deploy")," pipeline.\nIf you still need to pass artifacts between the pipelines you need use storage ",(0,i.kt)("a",d({parentName:"p"},{href:"/docs/0.15/usage/plugins/plugins"}),"plugins")," (e.g. one which stores files in an Amazon S3 bucket).")),(0,i.kt)("pre",null,(0,i.kt)("code",d({parentName:"pre"},{className:"language-bash"}),".woodpecker/\n\u251c\u2500\u2500 .build.yml\n\u251c\u2500\u2500 .deploy.yml\n\u251c\u2500\u2500 .lint.yml\n\u2514\u2500\u2500 .test.yml\n")),(0,i.kt)("p",null,".woodpecker/.build.yml"),(0,i.kt)("pre",null,(0,i.kt)("code",d({parentName:"pre"},{className:"language-yaml"}),"pipeline:\n  build:\n    image: debian:stable-slim\n    commands:\n      - echo building\n      - sleep 5\n")),(0,i.kt)("p",null,".woodpecker/.deploy.yml"),(0,i.kt)("pre",null,(0,i.kt)("code",d({parentName:"pre"},{className:"language-yaml"}),"pipeline:\n  deploy:\n    image: debian:stable-slim\n    commands:\n      - echo deploying\n\ndepends_on:\n  - lint\n  - build\n  - test\n")),(0,i.kt)("p",null,".woodpecker/.test.yml"),(0,i.kt)("pre",null,(0,i.kt)("code",d({parentName:"pre"},{className:"language-yaml"}),"pipeline:\n  test:\n    image: debian:stable-slim\n    commands:\n      - echo testing\n      - sleep 5\n\ndepends_on:\n  - build\n")),(0,i.kt)("p",null,".woodpecker/.lint.yml"),(0,i.kt)("pre",null,(0,i.kt)("code",d({parentName:"pre"},{className:"language-yaml"}),"pipeline:\n  lint:\n    image: debian:stable-slim\n    commands:\n      - echo linting\n      - sleep 5\n")),(0,i.kt)("h2",d({},{id:"status-lines"}),"Status lines"),(0,i.kt)("p",null,"Each pipeline has its own status line on GitHub."),(0,i.kt)("h2",d({},{id:"flow-control"}),"Flow control"),(0,i.kt)("p",null,"The pipelines run in parallel on separate agents and share nothing."),(0,i.kt)("p",null,"Dependencies between pipelines can be set with the ",(0,i.kt)("inlineCode",{parentName:"p"},"depends_on")," element. A pipeline doesn't execute until its dependencies did not complete successfully."),(0,i.kt)("p",null,"The name for a ",(0,i.kt)("inlineCode",{parentName:"p"},"depends_on")," entry is the filename without the path, leading dots and without the file extension ",(0,i.kt)("inlineCode",{parentName:"p"},".yml"),". If the project config for example uses ",(0,i.kt)("inlineCode",{parentName:"p"},".woodpecker/")," as path for ci files with a file named ",(0,i.kt)("inlineCode",{parentName:"p"},".woodpecker/.lint.yml")," the corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"depends_on")," entry would be ",(0,i.kt)("inlineCode",{parentName:"p"},"lint"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",d({parentName:"pre"},{className:"language-diff"}),"pipeline:\n  deploy:\n    image: debian:stable-slim\n    commands:\n      - echo deploying\n\n+depends_on:\n+  - lint\n+  - build\n+  - test\n")),(0,i.kt)("p",null,"Pipelines that need to run even on failures should set the ",(0,i.kt)("inlineCode",{parentName:"p"},"runs_on")," tag."),(0,i.kt)("pre",null,(0,i.kt)("code",d({parentName:"pre"},{className:"language-diff"}),"pipeline:\n  notify:\n    image: debian:stable-slim\n    commands:\n      - echo notifying\n\ndepends_on:\n  - deploy\n\n+runs_on: [ success, failure ]\n")),(0,i.kt)("p",null,"Some pipelines don't need the source code, set the ",(0,i.kt)("inlineCode",{parentName:"p"},"skip_clone")," tag to skip cloning:"),(0,i.kt)("pre",null,(0,i.kt)("code",d({parentName:"pre"},{className:"language-diff"}),"\npipeline:\n  notify:\n    image: debian:stable-slim\n    commands:\n      - echo notifying\n\ndepends_on:\n  - deploy\n\nruns_on: [ success, failure ]\n+skip_clone: true\n")))}b.isMDXComponent=!0}}]);