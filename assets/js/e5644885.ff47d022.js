"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[1291],{49613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(59496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8524:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>m,default:()=>h,frontMatter:()=>d,metadata:()=>g,toc:()=>f});var r=n(49613),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&p(e,n,t[n]);if(l)for(var n of l(t))c.call(t,n)&&p(e,n,t[n]);return e};const d={},m="Welcome to Woodpecker",g={unversionedId:"intro",id:"version-1.0/intro",title:"Welcome to Woodpecker",description:"Woodpecker is a simple CI engine with great extensibility. It focuses on executing pipelines inside containers.",source:"@site/versioned_docs/version-1.0/10-intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,editUrl:"https://github.com/woodpecker-ci/woodpecker/edit/main/docs/versioned_docs/version-1.0/10-intro.md",tags:[],version:"1.0",sidebarPosition:10,frontMatter:{},sidebar:"tutorialSidebar",next:{title:"Getting started",permalink:"/docs/usage/intro"}},k={},f=[{value:".woodpecker.yml",id:"woodpeckeryml",level:2},{value:"Steps are containers",id:"steps-are-containers",level:3},{value:"File changes are incremental",id:"file-changes-are-incremental",level:3},{value:"Plugins are straightforward",id:"plugins-are-straightforward",level:2},{value:"Continue reading",id:"continue-reading",level:2}],y={toc:f};function h(e){var t,a=e,{components:p}=a,d=((e,t)=>{var n={};for(var r in e)s.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&c.call(e,r)&&(n[r]=e[r]);return n})(a,["components"]);return(0,r.kt)("wrapper",(t=u(u({},y),d),o(t,i({components:p,mdxType:"MDXLayout"}))),(0,r.kt)("h1",u({},{id:"welcome-to-woodpecker"}),"Welcome to Woodpecker"),(0,r.kt)("p",null,"Woodpecker is a simple CI engine with great extensibility. It focuses on executing pipelines inside ",(0,r.kt)("a",u({parentName:"p"},{href:"https://opencontainers.org/"}),"containers"),".\nIf you are already using containers in your daily workflow, you'll for sure love Woodpecker."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"woodpecker",src:n(92514).Z,width:"1920",height:"1003"})),(0,r.kt)("h2",u({},{id:"woodpeckeryml"}),".woodpecker.yml"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Place your pipeline in a file named ",(0,r.kt)("inlineCode",{parentName:"li"},".woodpecker.yml")," in your repository"),(0,r.kt)("li",{parentName:"ul"},"Pipeline steps can be named as you like"),(0,r.kt)("li",{parentName:"ul"},"Run any command in the commands section")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-yaml"}),'# .woodpecker.yml\nsteps:\n  build:\n    image: debian\n    commands:\n      - echo "This is the build step"\n  a-test-step:\n    image: debian\n    commands:\n      - echo "Testing.."\n')),(0,r.kt)("h3",u({},{id:"steps-are-containers"}),"Steps are containers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Define any container image as context",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"either use your own and install the needed tools in a custom image"),(0,r.kt)("li",{parentName:"ul"},"or search for available images that are already tailored for your needs in image registries like ",(0,r.kt)("a",u({parentName:"li"},{href:"https://hub.docker.com/search?type=image"}),"Docker Hub")))),(0,r.kt)("li",{parentName:"ul"},"List the commands that should be executed in the container")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-diff"}),"steps:\n  build:\n-   image: debian\n+   image: mycompany/image-with-awscli\n    commands:\n      - aws help\n")),(0,r.kt)("h3",u({},{id:"file-changes-are-incremental"}),"File changes are incremental"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Woodpecker clones the source code in the beginning"),(0,r.kt)("li",{parentName:"ul"},"File changes are persisted throughout individual steps as the same volume is being mounted in all steps")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-yaml"}),"# .woodpecker.yml\nsteps:\n  build:\n    image: debian\n    commands:\n      - touch myfile\n  a-test-step:\n    image: debian\n    commands:\n      - cat myfile\n")),(0,r.kt)("h2",u({},{id:"plugins-are-straightforward"}),"Plugins are straightforward"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you copy the same shell script from project to project"),(0,r.kt)("li",{parentName:"ul"},"Pack it into a plugin instead"),(0,r.kt)("li",{parentName:"ul"},"And make the yaml declarative"),(0,r.kt)("li",{parentName:"ul"},"Plugins are Docker images with your script as an entrypoint")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-Dockerfile"}),'# Dockerfile\nFROM laszlocloud/kubectl\nCOPY deploy /usr/local/deploy\nENTRYPOINT ["/usr/local/deploy"]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-bash"}),"# deploy\nkubectl apply -f $PLUGIN_TEMPLATE\n")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-yaml"}),"# .woodpecker.yml\nsteps:\n  deploy-to-k8s:\n    image: laszlocloud/my-k8s-plugin\n    settings:\n      template: config/k8s/service.yml\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",u({parentName:"p"},{href:"/docs/usage/plugins/plugins"}),"plugin docs"),"."),(0,r.kt)("h2",u({},{id:"continue-reading"}),"Continue reading"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"/docs/usage/intro"}),"Create a Woodpecker pipeline for your repository")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"/docs/administration/setup"}),"Setup your own Woodpecker instance"))))}h.isMDXComponent=!0},92514:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/woodpecker-4c7b028122f13b47b001c676fbf6917f.png"}}]);