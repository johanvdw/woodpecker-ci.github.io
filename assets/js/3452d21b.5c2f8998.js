"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[5086],{49613:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(59496);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),u=r,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||s;return t?a.createElement(g,o(o({ref:n},p),{},{components:t})):a.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},45861:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>f,default:()=>O,frontMatter:()=>g,metadata:()=>v,toc:()=>b});var a=t(49613),r=Object.defineProperty,s=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,d=(e,n)=>{for(var t in n||(n={}))l.call(n,t)&&p(e,t,n[t]);if(i)for(var t of i(n))c.call(n,t)&&p(e,t,n[t]);return e},m=(e,n)=>s(e,o(n)),u=(e,n)=>{var t={};for(var a in e)l.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&i)for(var a of i(e))n.indexOf(a)<0&&c.call(e,a)&&(t[a]=e[a]);return t};const g={},f="Advanced YAML syntax",v={unversionedId:"usage/advanced-yaml-syntax",id:"version-1.0/usage/advanced-yaml-syntax",title:"Advanced YAML syntax",description:"Anchors & aliases",source:"@site/versioned_docs/version-1.0/20-usage/35-advanced-yaml-syntax.md",sourceDirName:"20-usage",slug:"/usage/advanced-yaml-syntax",permalink:"/docs/usage/advanced-yaml-syntax",draft:!1,editUrl:"https://github.com/woodpecker-ci/woodpecker/edit/main/docs/versioned_docs/version-1.0/20-usage/35-advanced-yaml-syntax.md",tags:[],version:"1.0",sidebarPosition:35,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Matrix workflows",permalink:"/docs/usage/matrix-workflows"},next:{title:"Secrets",permalink:"/docs/usage/secrets"}},y={},b=[{value:"Anchors &amp; aliases",id:"anchors--aliases",level:2},{value:"Map merges and overwrites",id:"map-merges-and-overwrites",level:2},{value:"Sequence merges",id:"sequence-merges",level:2}],h={toc:b},w="wrapper";function O(e){var n=e,{components:t}=n,r=u(n,["components"]);return(0,a.kt)(w,m(d(d({},h),r),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",d({},{id:"advanced-yaml-syntax"}),"Advanced YAML syntax"),(0,a.kt)("h2",d({},{id:"anchors--aliases"}),"Anchors & aliases"),(0,a.kt)("p",null,"You can use ",(0,a.kt)("a",d({parentName:"p"},{href:"https://yaml.org/spec/1.2.2/#3222-anchors-and-aliases"}),"YAML anchors & aliases")," as variables in your pipeline config."),(0,a.kt)("p",null,"To convert this:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-yml"}),"steps:\n  test:\n    image: golang:1.18\n    commands: go test ./...\n  build:\n    image: golang:1.18\n    commands: build\n")),(0,a.kt)("p",null,"Just add a new section called ",(0,a.kt)("strong",{parentName:"p"},"variables")," like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-diff"}),"+variables:\n+  - &golang_image 'golang:1.18'\n\n steps:\n   test:\n-    image: golang:1.18\n+    image: *golang_image\n     commands: go test ./...\n   build:\n-    image: golang:1.18\n+    image: *golang_image\n     commands: build\n")),(0,a.kt)("h2",d({},{id:"map-merges-and-overwrites"}),"Map merges and overwrites"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-yaml"}),"variables:\n  - &base-plugin-settings\n    target: dist\n    recursive: false\n    try: true\n  - &special-setting\n    special: true\n  - &some-plugin codeberg.org/6543/docker-images/print_env\n\nsteps:\n  develop:\n    image: *some-plugin\n    settings:\n      <<: [*base-plugin-settings, *special-setting] # merge two maps into an empty map\n    when:\n      branch: develop\n\n  main:\n    image: *some-plugin\n    settings:\n      <<: *base-plugin-settings # merge one map and ...\n      try: false # ... overwrite original value\n      ongoing: false # ... adding a new value\n    when:\n      branch: main\n")),(0,a.kt)("h2",d({},{id:"sequence-merges"}),"Sequence merges"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-yaml"}),"variables:\n  pre_cmds: &pre_cmds\n   - echo start\n   - whoami\n  post_cmds: &post_cmds\n   - echo stop\n  hello_cmd: &hello_cmd\n   - echo hello\n\nsteps:\n  step1:\n    image: debian\n    commands:\n     - <<: *pre_cmds # prepend a sequence\n     - echo exec step now do dedicated things\n     - <<: *post_cmds # append a sequence\n  step2:\n    image: debian\n    commands:\n     - <<: [*pre_cmds, *hello_cmd] # prepend two sequences\n     - echo echo from second step\n     - <<: *post_cmds\n")))}O.isMDXComponent=!0}}]);