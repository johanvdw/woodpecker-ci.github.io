"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[3671],{2006:e=>{e.exports=JSON.parse('[{"name":"Git Clone","url":"https://github.com/woodpecker-ci/plugin-git","icon":"https://woodpecker-ci.org/img/logo.svg","description":"This is the default plugin for the clone step.","docs":"<p>This plugin is automatically introduced into your pipeline as the first step.\\nIts purpose is to clone your Git repository.</p>\\n<h2 id=\\"features\\">Features</h2>\\n<ul>\\n<li>Git LFS support is enabled by default.</li>\\n<li>Fetch tags when needed.</li>\\n<li>Ajust submodules.</li>\\n</ul>\\n<h2 id=\\"overriding-settings\\">Overriding Settings</h2>\\n<p>You can manually define your <code>clone</code> step in order to change plugin or override some of the default settings.\\nConsult <a href=\\"https://woodpecker-ci.org/docs/usage/pipeline-syntax#clone\\">the <code>clone</code> section of the pipeline documentation</a> for more information;\\nthis documentation page only describes this plugin.</p>\\n<pre><code class=\\"language-yaml\\">clone:\\n  git:\\n    image: woodpeckerci/plugin-git\\n    settings:\\n      depth: 50\\n      lfs: false\\n</code></pre>\\n<h2 id=\\"settings\\">Settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Settings Name</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>depth</code></td>\\n<td><em>none</em></td>\\n<td>If specified, uses git&#39;s <code>--depth</code> option to create a shallow clone with a limited number of commits, overwritten by partial</td>\\n</tr>\\n<tr>\\n<td><code>lfs</code></td>\\n<td><code>true</code></td>\\n<td>Set this to <code>false</code> to disable retrieval of LFS files</td>\\n</tr>\\n<tr>\\n<td><code>recursive</code></td>\\n<td><code>false</code></td>\\n<td>Clones submodules recursively</td>\\n</tr>\\n<tr>\\n<td><code>skip_verify</code></td>\\n<td><code>false</code></td>\\n<td>Skips the SSL verification</td>\\n</tr>\\n<tr>\\n<td><code>tags</code></td>\\n<td><code>false</code> (except on tag event)</td>\\n<td>Fetches tags when set to true, default is false if event is not tag else true</td>\\n</tr>\\n<tr>\\n<td><code>submodule_overrides</code></td>\\n<td><em>none</em></td>\\n<td>Override submodule urls</td>\\n</tr>\\n<tr>\\n<td><code>submodule_update_remote</code></td>\\n<td><code>false</code></td>\\n<td>Pass the --remote flag to git submodule update</td>\\n</tr>\\n<tr>\\n<td><code>custom_ssl_path</code></td>\\n<td><em>none</em></td>\\n<td>Set path to custom cert</td>\\n</tr>\\n<tr>\\n<td><code>custom_ssl_url</code></td>\\n<td><em>none</em></td>\\n<td>Set url to custom cert</td>\\n</tr>\\n<tr>\\n<td><code>backoff</code></td>\\n<td><code>5sec</code></td>\\n<td>Change backoff duration</td>\\n</tr>\\n<tr>\\n<td><code>attempts</code></td>\\n<td><code>5</code></td>\\n<td>Change backoff attempts</td>\\n</tr>\\n<tr>\\n<td><code>branch</code></td>\\n<td>$CI_COMMIT_BRANCH</td>\\n<td>Change branch name to checkout to</td>\\n</tr>\\n<tr>\\n<td><code>partial</code></td>\\n<td><code>true</code> (except if tags are fetched)</td>\\n<td>Only fetch the one commit and it&#39;s blob objects to resolve all files, overwrite depth with 1</td>\\n</tr>\\n<tr>\\n<td><code>home</code></td>\\n<td></td>\\n<td>Change HOME var for commands executed, fail if it does not exist</td>\\n</tr>\\n</tbody></table>\\n","tags":["git","clone"],"containerImage":"woodpeckerci/plugin-git","containerImageUrl":"https://hub.docker.com/r/woodpeckerci/plugin-git","verified":true},{"name":"Docker Buildx","url":"https://codeberg.org/woodpecker-plugins/docker-buildx","icon":"https://woodpecker-ci.org/img/logo.svg","description":"plugin to build multiarch Docker images with buildx","docs":"<p>Woodpecker CI plugin to build multiarch Docker images with buildx. This plugin is a fork of <a href=\\"https://github.com/thegeeklab/drone-docker-buildx/\\">thegeeklab/drone-docker-buildx</a> which itself is a fork of <a href=\\"https://github.com/drone-plugins/drone-docker\\">drone-plugins/drone-docker</a>. You can find the full documentation at <a href=\\"https://woodpecker-plugins.codeberg.page/plugins/drone-docker-buildx\\">woodpecker-plugins.codeberg.page</a>.</p>\\n<h2 id=\\"features\\">Features</h2>\\n<ul>\\n<li>Build without push</li>\\n<li>Use custom registries</li>\\n<li>Build based on existing tags when needed</li>\\n<li>Push to multiple registries/repos</li>\\n</ul>\\n<p>It will automatically generate buildkit configuration to use custom CA certificate if following conditions are met:</p>\\n<ul>\\n<li>Setting <code>buildkit_config</code> is not set</li>\\n<li>Custom <code>registry</code>/<code>logins</code> value is provided</li>\\n<li>File exists <code>/etc/docker/certs.d/&lt;registry-value&gt;/ca.crt</code></li>\\n</ul>\\n<blockquote>\\n<p>NB! To mount custom CA you can use Woodpecker CI runner configuration environment <code>WOODPECKER_BACKEND_DOCKER_VOLUMES</code> with value <code>/etc/ssl/certs:/etc/ssl/certs:ro,/etc/docker/certs.d:/etc/docker/certs.d:ro</code>. And have created file <code>/etc/docker/certs.d/&lt;registry-value&gt;/ca.crt</code> with CA certificate on runner server host.</p>\\n</blockquote>\\n<h2 id=\\"settings\\">Settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Settings Name</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>dry-run</code></td>\\n<td><code>false</code></td>\\n<td>disables docker push</td>\\n</tr>\\n<tr>\\n<td><code>repo</code></td>\\n<td><em>none</em></td>\\n<td>sets repository name for the image (can be a list)</td>\\n</tr>\\n<tr>\\n<td><code>username</code></td>\\n<td><em>none</em></td>\\n<td>sets username to authenticates with</td>\\n</tr>\\n<tr>\\n<td><code>password</code></td>\\n<td><em>none</em></td>\\n<td>sets password / token to authenticates with</td>\\n</tr>\\n<tr>\\n<td><code>email</code></td>\\n<td><em>none</em></td>\\n<td>sets email address to authenticates with</td>\\n</tr>\\n<tr>\\n<td><code>registry</code></td>\\n<td><code>https://index.docker.io/v1/</code></td>\\n<td>sets docker registry to authenticate with</td>\\n</tr>\\n<tr>\\n<td><code>dockerfile</code></td>\\n<td><code>Dockerfile</code></td>\\n<td>sets dockerfile to use for the image build</td>\\n</tr>\\n<tr>\\n<td><code>tag</code>/<code>tags</code></td>\\n<td>@&quot;.tags&quot;</td>\\n<td>sets repository tags to use for the image</td>\\n</tr>\\n<tr>\\n<td><code>platforms</code></td>\\n<td><em>none</em></td>\\n<td>sets target platform for build</td>\\n</tr>\\n</tbody></table>\\n<h2 id=\\"auto_tag\\">auto_tag</h2>\\n<p>If set to true, it will use the <code>default_tag</code> (&quot;latest&quot;) on tag event or default branch.\\nIf it&#39;s a tag event it will also assume sem versioning and add tags accordingly (<code>x</code>, <code>x.x</code> and <code>x.x.x</code>).\\nIf it&#39;s not a tag event, and no default branch, automated tags are skipped.</p>\\n<h2 id=\\"examples\\">Examples</h2>\\n<pre><code class=\\"language-yml\\">  publish-next-agent:\\n    image: woodpeckerci/plugin-docker-buildx\\n    secrets: [docker_username, docker_password]\\n    settings:\\n      repo: woodpeckerci/woodpecker-agent\\n      dockerfile: docker/Dockerfile.agent.multiarch\\n      platforms: windows/amd64,darwin/amd64,darwin/arm64,freebsd/amd64,linux/amd64,linux/arm64/v8\\n      tag: next\\n    when:\\n      branch: ${CI_REPO_DEFAULT_BRANCH}\\n      event: push\\n</code></pre>\\n<pre><code class=\\"language-yml\\">  publish:\\n    image: woodpeckerci/plugin-docker-buildx\\n    settings:\\n      platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm64/v8,linux/ppc64le,linux/riscv64,linux/s390x\\n      repo: codeberg.org/${CI_REPO_OWNER}/hello\\n      registry: codeberg.org\\n      tags: latest\\n      username: ${CI_REPO_OWNER}\\n      password:\\n        from_secret: cb_token\\n</code></pre>\\n<pre><code class=\\"language-yml\\">  docker-build:\\n    image: woodpeckerci/plugin-docker-buildx\\n    settings:\\n      repo: codeberg.org/${CI_REPO_OWNER}/hello\\n      registry: codeberg.org\\n      dry_run: true\\n      output: type=oci,dest=${CI_REPO_OWNER}-hello.tar\\n</code></pre>\\n<h2 id=\\"advanced-settings\\">Advanced Settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Settings Name</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>mirror</code></td>\\n<td><em>none</em></td>\\n<td>sets a registry mirror to pull images</td>\\n</tr>\\n<tr>\\n<td><code>storage_driver</code></td>\\n<td><em>none</em></td>\\n<td>sets the docker daemon storage driver</td>\\n</tr>\\n<tr>\\n<td><code>storage_path</code></td>\\n<td><code>/var/lib/docker</code></td>\\n<td>sets the docker daemon storage path</td>\\n</tr>\\n<tr>\\n<td><code>bip</code></td>\\n<td><em>none</em></td>\\n<td>allows the docker daemon to bride ip address</td>\\n</tr>\\n<tr>\\n<td><code>mtu</code></td>\\n<td><em>none</em></td>\\n<td>sets docker daemon custom mtu setting</td>\\n</tr>\\n<tr>\\n<td><code>custom_dns</code></td>\\n<td><em>none</em></td>\\n<td>sets custom docker daemon dns server</td>\\n</tr>\\n<tr>\\n<td><code>custom_dns_search</code></td>\\n<td><em>none</em></td>\\n<td>sets custom docker daemon dns search domain</td>\\n</tr>\\n<tr>\\n<td><code>insecure</code></td>\\n<td><code>false</code></td>\\n<td>allows the docker daemon to use insecure registries</td>\\n</tr>\\n<tr>\\n<td><code>ipv6</code></td>\\n<td><code>false</code></td>\\n<td>enables docker daemon IPv6 support</td>\\n</tr>\\n<tr>\\n<td><code>experimental</code></td>\\n<td><code>false</code></td>\\n<td>enables docker daemon experimental mode</td>\\n</tr>\\n<tr>\\n<td><code>debug</code></td>\\n<td><code>false</code></td>\\n<td>enables verbose debug mode for the docker daemon</td>\\n</tr>\\n<tr>\\n<td><code>daemon_off</code></td>\\n<td><code>false</code></td>\\n<td>disables the startup of the docker daemon</td>\\n</tr>\\n<tr>\\n<td><code>buildkit_config</code></td>\\n<td><em>none</em></td>\\n<td>sets content of the docker <a href=\\"https://github.com/moby/buildkit/blob/master/docs/buildkitd.toml.md\\">buildkit TOML config</a></td>\\n</tr>\\n<tr>\\n<td><code>context</code></td>\\n<td><code>.</code></td>\\n<td>sets the path of the build context to use</td>\\n</tr>\\n<tr>\\n<td><code>auto_tag</code></td>\\n<td><code>false</code></td>\\n<td>generates tag names automatically based on git branch and git tag, tags supplied via <code>tags</code> are additionally added to the auto_tags without suffix</td>\\n</tr>\\n<tr>\\n<td><code>default_suffix&quot;</code>/<code>auto_tag_suffix</code></td>\\n<td><em>none</em></td>\\n<td>generates tag names with the given suffix</td>\\n</tr>\\n<tr>\\n<td><code>default_tag</code></td>\\n<td><code>latest</code></td>\\n<td>overrides the default tag name used when generating with <code>auto_tag</code> enabled</td>\\n</tr>\\n<tr>\\n<td><code>label</code>/<code>labels</code></td>\\n<td><em>none</em></td>\\n<td>sets labels to use for the image in format <code>&lt;name&gt;=&lt;value&gt;</code></td>\\n</tr>\\n<tr>\\n<td><code>default_labels</code>/<code>auto_labels</code></td>\\n<td><code>true</code></td>\\n<td>sets docker image labels based on git information</td>\\n</tr>\\n<tr>\\n<td><code>build_args</code></td>\\n<td><em>none</em></td>\\n<td>sets custom build arguments for the build</td>\\n</tr>\\n<tr>\\n<td><code>build_args_from_env</code></td>\\n<td><em>none</em></td>\\n<td>forwards environment variables as custom arguments to the build</td>\\n</tr>\\n<tr>\\n<td><code>quiet</code></td>\\n<td><code>false</code></td>\\n<td>enables suppression of the build output</td>\\n</tr>\\n<tr>\\n<td><code>target</code></td>\\n<td><em>none</em></td>\\n<td>sets the build target to use</td>\\n</tr>\\n<tr>\\n<td><code>cache_from</code></td>\\n<td><em>none</em></td>\\n<td>sets images to consider as cache sources</td>\\n</tr>\\n<tr>\\n<td><code>pull_image</code></td>\\n<td><code>true</code></td>\\n<td>enforces to pull base image at build time</td>\\n</tr>\\n<tr>\\n<td><code>compress</code></td>\\n<td><code>false</code></td>\\n<td>enables compression of the build context using gzip</td>\\n</tr>\\n<tr>\\n<td><code>config</code></td>\\n<td><em>none</em></td>\\n<td>sets content of the docker daemon json config</td>\\n</tr>\\n<tr>\\n<td><code>purge</code></td>\\n<td><code>true</code></td>\\n<td>enables cleanup of the docker environment at the end of a build</td>\\n</tr>\\n<tr>\\n<td><code>no_cache</code></td>\\n<td><code>false</code></td>\\n<td>disables the usage of cached intermediate containers</td>\\n</tr>\\n<tr>\\n<td><code>add_host</code></td>\\n<td><em>none</em></td>\\n<td>sets additional host:ip mapping</td>\\n</tr>\\n<tr>\\n<td><code>output</code></td>\\n<td><em>none</em></td>\\n<td>sets build output in format <code>type=&lt;type&gt;[,&lt;key&gt;=&lt;value&gt;]</code></td>\\n</tr>\\n<tr>\\n<td><code>logins</code></td>\\n<td><em>none</em></td>\\n<td>option to log into multiple registries</td>\\n</tr>\\n</tbody></table>\\n<h2 id=\\"multi-registry-push-example\\">Multi registry push example</h2>\\n<p>Only supported with <code>woodpecker &gt;= 1.0.0</code> (next-da997fa3).</p>\\n<pre><code class=\\"language-yml\\">settings:\\n  repo: a6543/tmp,codeberg.org/6543/tmp\\n  tag: demo\\n  logins:\\n    - registry: https://index.docker.io/v1/\\n      username: a6543\\n      password:\\n        from_secret: docker_token\\n    - registry: https://codeberg.org\\n      username: &quot;6543&quot;\\n      password:\\n        from_secret: cb_token\\n</code></pre>\\n","tags":["docker","image","container","build"],"containerImage":"woodpeckerci/plugin-docker-buildx","containerImageUrl":"https://hub.docker.com/r/woodpeckerci/plugin-docker-buildx","verified":true},{"name":"Codecov plugin","url":"https://github.com/woodpecker-ci/plugin-codecov","icon":"https://woodpecker-ci.org/img/logo.svg","description":"Plugin to upload coverage reports to Codecov.io.","docs":"<p>The Codecov plugin uploads coverage reports in one of the <a href=\\"https://docs.codecov.com/docs/supported-report-formats\\">supported formats</a> to <a href=\\"https://about.codecov.io/\\">Codecov.io</a>.</p>\\n<h2 id=\\"usage\\">Usage</h2>\\n<p>To use the plugin add a step similar to the following one to your Woodpecker pipeline config:</p>\\n<pre><code class=\\"language-yml\\">pipeline:\\n  codecov:\\n    image: woodpeckerci/plugin-codecov\\n    settings:\\n      files:\\n        - my-coverage-report-output.out\\n        - another-coverage-report.json\\n      token:\\n        from_secret: codecov_token\\n</code></pre>\\n","tags":["coverage","testing"],"containerImage":"woodpeckerci/plugin-codecov","containerImageUrl":"https://hub.docker.com/r/woodpeckerci/plugin-codecov","verified":true},{"name":"Surge preview plugin","url":"https://github.com/woodpecker-ci/plugin-surge-preview","icon":"https://woodpecker-ci.org/img/logo.svg","description":"Plugin to create static pages deployments as preview environments on pull-requests.","docs":"<p>The surge-preview plugin uploads a files of a directory to the CDN of <a href=\\"https://surge.sh/\\">surge.sh</a> it automatically generates an url and posts the status of the deployment with an url as a comment to the pull-request. After closing a pull-request it automatically destroys the preview environment again.</p>\\n<h2 id=\\"usage\\">Usage</h2>\\n<p>To use the plugin add a step similar to the following one to your Woodpecker pipeline config:</p>\\n<pre><code class=\\"language-yml\\">pipeline:\\n  preview:\\n    image: woodpeckerci/plugin-surge-preview\\n    settings:\\n      path: dist/ # path to directory to publish files from\\n      surge_token: xxx # install surge cli and run `surge token`: https://surge.sh/help/getting-started-with-surge\\n      forge_type: github # or gitea, gitlab, ...\\n      forge_url: https://github.com # or https://codeberg.org, https://gitlab.com, ...\\n      forge_repo_token: xxx # access token for your forge\\n    when:\\n      event: pull_request\\n</code></pre>\\n","tags":["publish","cdn","preview"],"containerImage":"woodpeckerci/plugin-surge-preview","containerImageUrl":"https://hub.docker.com/r/woodpeckerci/plugin-surge-preview","verified":true},{"name":"S3 Plugin","url":"https://github.com/woodpecker-ci/plugin-s3","icon":"https://woodpecker-ci.org/img/logo.svg","description":"Plugin to publish files and artifacts to Amazon S3 or Minio.","docs":"<p>The S3 plugin uploads files and build artifacts to your S3 bucket, or S3-compatible bucket such as Minio.\\nThe below pipeline configuration demonstrates simple usage:</p>\\n<pre><code class=\\"language-yml\\">pipeline:\\n  upload:\\n    image: woodpeckerci/plugin-s3\\n    settings:\\n      bucket: my-bucket-name\\n      access_key: a50d28f4dd477bc184fbd10b376de753\\n      secret_key: ****************************************\\n      source: public/**/*\\n      target: /target/location\\n</code></pre>\\n<p>Source the aws credentials from secrets:</p>\\n<pre><code class=\\"language-yml\\">pipeline:\\n  upload:\\n    image: woodpeckerci/plugin-s3\\n    settings:\\n      bucket: my-bucket-name\\n      access_key:\\n        from_secret: aws_access_key_id\\n      secret_key:\\n        from_secret: aws_secret_access_key\\n      source: public/**/*\\n      target: /target/location\\n</code></pre>\\n<p>Use the build number in the S3 target prefix:</p>\\n<pre><code class=\\"language-yml\\">pipeline:\\n  upload:\\n    image: woodpeckerci/plugin-s3\\n    settings:\\n      bucket: my-bucket-name\\n      source: public/**/*\\n      target: /target/location/${CI_BUILD_NUMBER}\\n</code></pre>\\n<p>Override the default acl and region:</p>\\n<pre><code class=\\"language-yml\\">steps:\\n- name: upload\\n  image: woodpeckerci/plugin-s3\\n  settings:\\n    bucket: my-bucket-name\\n    acl: public-read\\n    region: us-east-1\\n    source: public/**/*\\n    target: /target/location\\n</code></pre>\\n<p>Configure the plugin to strip path prefixes when uploading:</p>\\n<pre><code class=\\"language-yml\\">pipeline:\\n  upload:\\n    image: woodpeckerci/plugin-s3\\n    settings:\\n      bucket: my-bucket-name\\n      source: public/**/*\\n      target: /target/location\\n      strip_prefix: public/\\n</code></pre>\\n<p>Configure the plugin to exclude files from upload:</p>\\n<pre><code class=\\"language-yml\\">pipeline:\\n  upload:\\n    image: woodpeckerci/plugin-s3\\n    settings:\\n      bucket: my-bucket-name\\n      source: public/**/*\\n      target: /target/location\\n      exclude:\\n        - **/*.xml\\n</code></pre>\\n<p>Configure the plugin to connect to a Minio server:</p>\\n<pre><code class=\\"language-yml\\">pipeline:\\n  upload:\\n    image: woodpeckerci/plugin-s3\\n    settings:\\n      bucket: my-bucket-name\\n      source: public/**/*\\n      target: /target/location\\n      path_style: true\\n      endpoint: https://play.minio.io:9000\\n</code></pre>\\n<h1 id=\\"parameter-reference\\">Parameter Reference</h1>\\n<p>endpoint\\n: custom endpoint URL (optional, to use a S3 compatible non-Amazon service)</p>\\n<p>access_key\\n: amazon key (optional)</p>\\n<p>secret_key\\n: amazon secret key (optional)</p>\\n<p>bucket\\n: bucket name</p>\\n<p>region\\n: bucket region (<code>us-east-1</code>, <code>eu-west-1</code>, etc)</p>\\n<p>acl\\n: access to files that are uploaded (<code>private</code>, <code>public-read</code>, etc)</p>\\n<p>source\\n: source location of the files, using a glob matching pattern. Location must be within the woodpecker workspace.</p>\\n<p>target\\n: target location of files in the bucket</p>\\n<p>encryption\\n: if provided, use server-side encryption</p>\\n<p>strip_prefix\\n: strip the prefix from source path</p>\\n<p>exclude\\n: glob exclusion patterns</p>\\n<p>path_style\\n: whether path style URLs should be used (true for minio)</p>\\n","tags":["publish","s3","amazon","minio","storage"],"containerImage":"woodpeckerci/plugin-s3","containerImageUrl":"https://hub.docker.com/r/woodpeckerci/plugin-s3","verified":true},{"name":"Node PM","url":"https://codeberg.org/woodpecker-plugins/node-pm","description":"Plugin to execute NPM, PNPM or Yarn scripts","docs":"<p>Plugin to execute NPM, PNPM or Yarn scripts.</p>\\n<h2 id=\\"features\\">Features</h2>\\n<ul>\\n<li>automatically find used package manager (based on lockfile)</li>\\n<li>install if <code>node_modules</code> don&#39;t exist</li>\\n<li>run multiple tasks</li>\\n</ul>\\n<h2 id=\\"usage\\">Usage</h2>\\n<p>Example pipeline running one script:</p>\\n<pre><code class=\\"language-yaml\\">pipeline:\\n    build:\\n        image: codeberg.org/woodpecker-plugins/node-pm\\n        settings:\\n            run: build # script name\\n            with: pnpm # if `with` is set, enforce to use this package manager\\n</code></pre>\\n<p>Example pipeline running multiple scripts (<code>prepare</code> and <code>build</code>):</p>\\n<pre><code class=\\"language-yaml\\">pipeline:\\n    build:\\n        image: codeberg.org/woodpecker-plugins/node-pm\\n        settings:\\n            run:\\n              - prepare\\n              - build\\n</code></pre>\\n","tags":["node","npm","pnpm","yarn"],"containerImage":"woodpeckerci/plugin-node-pm","containerImageUrl":"https://hub.docker.com/r/woodpeckerci/plugin-node-pm","verified":true},{"name":"Block Git changes","url":"https://codeberg.org/qwerty287/woodpecker-block-git-changes","description":"Plugin to block uncommited  changes in the Git repository","docs":"<p>Plugin that fails if the Git repository contains any uncommited changes.</p>\\n<h2 id=\\"usage\\">Usage</h2>\\n<pre><code class=\\"language-yaml\\">pipeline:\\n    block-changes:\\n        image: qwerty287/woodpecker-block-git-changes\\n</code></pre>\\n<p>This will never fail because there isn&#39;t any change done before.</p>\\n<pre><code class=\\"language-yaml\\">pipeline:\\n    echo:\\n        image: alpine\\n        commands:\\n            - echo &quot;hello world&quot; &gt; README.md\\n\\n    block-changes:\\n      image: qwerty287/woodpecker-block-git-changes\\n</code></pre>\\n<p>This will fail if your README.md doesn&#39;t already contain <code>hello world</code>.</p>\\n","tags":["git","changes"],"containerImage":"qwerty287/woodpecker-block-git-changes","containerImageUrl":"https://hub.docker.com/r/qwerty287/woodpecker-block-git-changes","verified":false},{"name":"Regex Check","url":"https://codeberg.org/qwerty287/woodpecker-regex-check","description":"Plugin to check if files contain specified regex or match the wildcard","docs":"<p>Plugin to check if files contain specified regex or match the wildcard.</p>\\n<h2 id=\\"usage\\">Usage</h2>\\n<p>Example pipeline:</p>\\n<pre><code class=\\"language-yaml\\">pipeline:\\n    find-static-imports:\\n        image: qwerty287/woodpecker-regex-check\\n        settings:\\n            pattern: &quot;*.java&quot;\\n            regex: &quot;import static .*;&quot;\\n</code></pre>\\n<h3 id=\\"config-file\\">Config file</h3>\\n<p>With the <code>config</code> setting, you can set a path to the config file. This allows you to specify multiple rules. It can be a JSON or a YAML file, must be a list of items with the following options:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n<th>Default</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>pattern</code></td>\\n<td>File pattern on which formatting should run</td>\\n<td><code>*</code> (all files)</td>\\n</tr>\\n<tr>\\n<td><code>path</code></td>\\n<td>Subdirectory of repository root to check</td>\\n<td><code>.</code> (repository root directory)</td>\\n</tr>\\n<tr>\\n<td><code>regex</code></td>\\n<td>Regex to search for</td>\\n<td>none</td>\\n</tr>\\n<tr>\\n<td><code>glob</code></td>\\n<td>Wildcard to match file contents</td>\\n<td>none</td>\\n</tr>\\n<tr>\\n<td><code>must_contain</code></td>\\n<td>If files must (if <code>true</code>) or must not (if <code>false</code>) contain the regex/wildcard</td>\\n<td><code>false</code></td>\\n</tr>\\n</tbody></table>\\n<p><code>regex</code> or <code>glob</code> is necessary, but you are not allowed to set both.</p>\\n<h2 id=\\"settings\\">Settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n<th>Default</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>pattern</code></td>\\n<td>File pattern on which checks should run</td>\\n<td><code>*</code> (all files)</td>\\n</tr>\\n<tr>\\n<td><code>path</code></td>\\n<td>Subdirectory of repository root to check</td>\\n<td><code>.</code> (repository root directory)</td>\\n</tr>\\n<tr>\\n<td><code>regex</code></td>\\n<td>Regex to search for</td>\\n<td>none</td>\\n</tr>\\n<tr>\\n<td><code>glob</code></td>\\n<td>Wildcard to match file contents</td>\\n<td>none</td>\\n</tr>\\n<tr>\\n<td><code>config</code></td>\\n<td>Path to config file</td>\\n<td>none</td>\\n</tr>\\n<tr>\\n<td><code>must_contain</code></td>\\n<td>If files must (if <code>true</code>) or must not (if <code>false</code>) contain the regex/wildcard</td>\\n<td><code>false</code></td>\\n</tr>\\n</tbody></table>\\n<p><code>regex</code>, <code>glob</code> or <code>config</code> is necessary, but you are not allowed to set both <code>regex</code> and <code>glob</code>. If you set <code>config</code>, the other options are ignored.\\n<code>pattern</code> and <code>glob</code> use <a href=\\"https://github.com/gobwas/glob\\">https://github.com/gobwas/glob</a>.</p>\\n","tags":["regex","wildcard"],"containerImage":"qwerty287/woodpecker-regex-check","containerImageUrl":"https://hub.docker.com/r/qwerty287/woodpecker-regex-check","verified":false},{"name":"Gitea Comment","url":"https://github.com/markopolo123/gitea-comment-plugin","description":"Plugin to add comments to a Gitea Pull Request","docs":"<p>A Woodpecker plugin to post comments onto a Gitea Pull Request.</p>\\n<h2 id=\\"usage\\">Usage</h2>\\n<p>Example pipeline:</p>\\n<pre><code class=\\"language-yaml\\">pipeline:\\n  comment:\\n    image: mcs94/gitea-comment\\n    settings:\\n      gitea_address: https://gitea.url.goes.here\\n      gitea_token:\\n        from_secret: gitea_token\\n      comment: &gt;\\n        \u2705 Build ${CI_BUILD_EVENT} of `${CI_REPO_NAME}` has status `${CI_BUILD_STATUS}`.\\n\\n        \ud83d\udcdd Commit by ${CI_COMMIT_AUTHOR} on `${CI_COMMIT_BRANCH}`:\\n\\n        `${CI_COMMIT_MESSAGE}`\\n\\n        \ud83c\udf10 ${CI_BUILD_LINK}\\n    when:\\n      event: [pull_request]\\n</code></pre>\\n<h2 id=\\"settings\\">Settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Description</th>\\n<th>Default</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>gitea_address</code></td>\\n<td>URL for your gitea instance</td>\\n<td>none</td>\\n</tr>\\n<tr>\\n<td><code>gitea_token</code></td>\\n<td>Gitea API token</td>\\n<td>none</td>\\n</tr>\\n<tr>\\n<td><code>comment</code></td>\\n<td>comment to add to Pull Request</td>\\n<td>none</td>\\n</tr>\\n</tbody></table>\\n","tags":["Gitea","comment"],"containerImage":"mcs94/gitea-comment","containerImageUrl":"https://hub.docker.com/r/mcs94/gitea-comment","verified":false},{"name":"Git Push","url":"https://github.com/appleboy/drone-git-push","icon":"https://raw.githubusercontent.com/appleboy/drone-git-push/master/images/logo.svg","description":"Commit and push to an git repo via SSH","docs":"<p>Use this plugin for commit and push an git repo.\\nYou will need to supply Drone / Woodpecker with a private SSH key or use the same credentials as the cloned repo to being able to push changes.</p>\\n<pre><code class=\\"language-yaml\\">- name: push commit\\n  image: appleboy/drone-git-push\\n  settings:\\n    branch: master\\n    remote: ssh://git@git.heroku.com/falling-wind-1624.git\\n    force: false\\n    commit: true\\n</code></pre>\\n<p>An example of pushing a branch back to the current repository:</p>\\n<pre><code class=\\"language-yaml\\">- name: push commit\\n  image: appleboy/drone-git-push\\n  settings:\\n    remote_name: origin\\n    branch: gh-pages\\n    local_ref: gh-pages\\n</code></pre>\\n<p>An example of specifying the path to a repo:</p>\\n<pre><code class=\\"language-yaml\\">- name: push commit\\n  image: appleboy/drone-git-push\\n  settings:\\n    remote_name: origin\\n    branch: gh-pages\\n    local_ref: gh-pages\\n    path: path/to/repo\\n</code></pre>\\n<h2 id=\\"parameter-reference\\">Parameter Reference</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>setting</th>\\n<th>description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td>ssh_key</td>\\n<td>private SSH key for the remote machine</td>\\n</tr>\\n<tr>\\n<td>remote</td>\\n<td>target remote repository (if blank, assume exists)</td>\\n</tr>\\n<tr>\\n<td>remote_name</td>\\n<td>name of the remote to use locally (default &quot;deploy&quot;)</td>\\n</tr>\\n<tr>\\n<td>branch</td>\\n<td>target remote branch, defaults to master</td>\\n</tr>\\n<tr>\\n<td>local_branch</td>\\n<td>local branch or ref to push (default &quot;HEAD&quot;)</td>\\n</tr>\\n<tr>\\n<td>path</td>\\n<td>path to git repo (if blank, assume current directory)</td>\\n</tr>\\n<tr>\\n<td>force</td>\\n<td>force push using the <code>--force</code> flag, defaults to false</td>\\n</tr>\\n<tr>\\n<td>skip_verify</td>\\n<td>skip verification of HTTPS certs, defaults to false</td>\\n</tr>\\n<tr>\\n<td>commit</td>\\n<td>add and commit the contents of the repo before pushing, defaults to false</td>\\n</tr>\\n<tr>\\n<td>commit_message</td>\\n<td>add a custom message for commit, if it is omitted, it will be <code>[skip ci] Commit dirty state</code></td>\\n</tr>\\n<tr>\\n<td>empty_commit</td>\\n<td>if you only want generate an empty commit, you can do it using this option</td>\\n</tr>\\n<tr>\\n<td>tag</td>\\n<td>if you want to add a tag to the commit, you can do it using this option. You must also set <code>followtags</code> to <code>true</code> if you want the tag to be pushed to the remote</td>\\n</tr>\\n<tr>\\n<td>author_name</td>\\n<td>the name to use for the author of the commit (if blank, assume push commiter name)</td>\\n</tr>\\n<tr>\\n<td>author_email</td>\\n<td>the email address to use for the author of the commit (if blank, assume push commiter name)</td>\\n</tr>\\n<tr>\\n<td>followtags</td>\\n<td>push with --follow-tags option</td>\\n</tr>\\n</tbody></table>\\n","tags":["deploy","publish","git-push"],"author":"appleboy","containerImage":"appleboy/drone-git-push","containerImageUrl":"https://hub.docker.com/r/appleboy/drone-git-push","verified":false},{"name":"WebDAV","url":"https://github.com/vividboarder/drone-webdav","description":"plugin to publish any artifacts to any WebDAV server","docs":"<p>A <a href=\\"https://www.drone.io/\\">Drone CI</a> / <a href=\\"https://woodpecker-ci.org/\\">Woodpecker CI</a> plugin,\\nthat will allow pushing build artifacts to any <a href=\\"http://www.webdav.org/\\">WebDAV</a> server, including Nextcloud or ownCloud.</p>\\n<h2 id=\\"features\\">Features</h2>\\n<ul>\\n<li>Upload multiple files</li>\\n<li>Use a proxy</li>\\n<li>Retry on fail</li>\\n</ul>\\n<h2 id=\\"settings\\">Settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Settings Name</th>\\n<th>Required</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>file</code></td>\\n<td><strong>\u2713</strong></td>\\n<td>File(s) to upload. Use <a href=\\"https://curl.se/docs/manpage.html#-T\\">curl syntax</a> for multiple (e.g. <code>{dogs.png,cats.jpg}</code>)</td>\\n</tr>\\n<tr>\\n<td><code>destination</code></td>\\n<td><strong>\u2713</strong></td>\\n<td>The WebDav <strong>folder</strong> url</td>\\n</tr>\\n<tr>\\n<td><code>user</code></td>\\n<td><strong>\u2713</strong></td>\\n<td>The WebDav-<strong>User</strong> to use</td>\\n</tr>\\n<tr>\\n<td><code>password</code></td>\\n<td></td>\\n<td>The <strong>Password</strong> for the WebDav-User</td>\\n</tr>\\n<tr>\\n<td><code>proxy_url</code></td>\\n<td></td>\\n<td>May be used to specify a proxy (e.g. <code>socks5://{ip_address}:{port}</code></td>\\n</tr>\\n<tr>\\n<td><code>timeout</code></td>\\n<td></td>\\n<td>Defines a timeout (in seconds) to stop the upload after a certain time</td>\\n</tr>\\n<tr>\\n<td><code>attempts</code></td>\\n<td></td>\\n<td>Defines how often a failed upload should be retried. Normally there is only one upload attempt</td>\\n</tr>\\n<tr>\\n<td><code>custom_arguments</code></td>\\n<td></td>\\n<td>Additional arguments to be passed to <a href=\\"https://curl.se/\\"><code>curl</code></a></td>\\n</tr>\\n</tbody></table>\\n<h2 id=\\"example\\">Example</h2>\\n<pre><code class=\\"language-yaml\\">pipeline:\\n  upload_debug:\\n    image: vividboarder/drone-webdav\\n    settings:\\n      file: com.vividboarder.otbeta/build/outputs/apk/com.vividboarder.otbeta-debug.apk\\n      destination: https://my.nextcloud.com/remote.php/dav/files/vividboarder/Android/Apks/\\n      user:\\n        from_secret: WEBDAV_USER\\n      password:\\n        from_secret: WEBDAV_PASSWORD\\n</code></pre>\\n","tags":["deploy","publish"],"containerImage":"vividboarder/drone-webdav","containerImageUrl":"https://hub.docker.com/r/vividboarder/drone-webdav","verified":false},{"name":"Aptly","url":"https://gitea.zionetrix.net/bn8/aptly-publish","icon":"https://www.aptly.info/img/logo.svg","description":"plugin to publish Debian package on a Aptly repository","docs":"<p>Woodpecker CI plugin to publish one (or more) Debian package on a Aptly repository using its API.</p>\\n<h2 id=\\"features\\">Features</h2>\\n<p>This plugin will try to :</p>\\n<ul>\\n<li>List all changes files in the specified directory and filter on the specified source package name (if specified)</li>\\n<li>Iter on detected changes files and foreach of then:</li>\\n<li>the changes file is parsed to detect the source package name, the distribution and included files</li>\\n<li>the repository name is computed (if not specified). <strong>Format:</strong> <code>{prefix}_{distribution}_{component}</code>. <strong>Note:</strong> if the default prefix is specified (<code>.</code>), it will not be used to compute the repository name.</li>\\n<li>the current published distribution is retreived using APTLY Publish API to:<ul>\\n<li>check it was already manally published a first time</li>\\n<li>check it used a snapshot kind of sources</li>\\n<li>retreive other components source snapshot</li>\\n</ul>\\n</li>\\n<li>Upload the changes file and all its included files using APTLY File Upload API in a directory named as the source package</li>\\n<li>Include the changes file using APTLY Local Repos API</li>\\n<li>Compute a snapshot name for the repository based on the current date and the repository name. <strong>Format:</strong> <code>YYYYMMDD-HHMMSS_{repository name}</code></li>\\n<li>Create a snapshot of the repository using APTLY Local Repos API</li>\\n<li>Update the published distribution with this new snapshot as source of the specified component and keeping other components source snapshot.</li>\\n</ul>\\n<p>In case of error, it will exit with a detailed error message (within the limits of what is provided by the Aptly API).</p>\\n<h2 id=\\"settings\\">Settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Settings Name</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>api_url</code></td>\\n<td><em>none</em></td>\\n<td>Your Aptly API URL (required)</td>\\n</tr>\\n<tr>\\n<td><code>api_username</code></td>\\n<td><em>none</em></td>\\n<td>Username to authenticate on your Aptly API (required)</td>\\n</tr>\\n<tr>\\n<td><code>api_password</code></td>\\n<td><em>none</em></td>\\n<td>Password to authenticate on your Aptly API (required)</td>\\n</tr>\\n<tr>\\n<td><code>prefix</code></td>\\n<td><code>.</code></td>\\n<td>The publishing prefix</td>\\n</tr>\\n<tr>\\n<td><code>repo_component</code></td>\\n<td><code>main</code></td>\\n<td>The component name to publish on</td>\\n</tr>\\n<tr>\\n<td><code>repo_name</code></td>\\n<td><code>{prefix}_{distribution}_{component}</code></td>\\n<td>The repository name to publish on. If not specified, it will be computed using the specified prefix and component and the detected package distribution. See above for details.</td>\\n</tr>\\n<tr>\\n<td><code>path</code></td>\\n<td><code>dist</code></td>\\n<td>Path to the directory where files to publish are stored</td>\\n</tr>\\n<tr>\\n<td><code>source_name</code></td>\\n<td><em>none</em></td>\\n<td>Name of the source package to publish (optional, default: all <code>changes</code> files are will be publish)</td>\\n</tr>\\n<tr>\\n<td><code>max_retries</code></td>\\n<td><em>none</em></td>\\n<td>The number of retry in case of error calling the Aptly API (optional, default: no retry)</td>\\n</tr>\\n</tbody></table>\\n<h2 id=\\"example\\">Example</h2>\\n<pre><code class=\\"language-yaml\\">pipeline:\\n  publish:\\n    image: brenard/aptly-publish\\n    settings:\\n      api_url: https://your.aptly.tld/api\\n      api_username: myproject\\n      api_password:\\n        from_secret: aptly_api_password\\n      prefix: debian\\n      repo_component: main\\n      repo_name: debian_stable_main\\n      path: dist\\n      source_name: myproject\\n      max_retries: 2\\n</code></pre>\\n","tags":["APT","aptly","publish"],"containerImage":"brenard/aptly-publish","containerImageUrl":"https://hub.docker.com/r/brenard/aptly-publish","verified":false},{"name":"Trigger","url":"https://codeberg.org/woodpecker-plugins/trigger","icon":"https://woodpecker-ci.org/img/logo.svg","description":"plugin to trigger Woodpecker CI builds or deployments","docs":"<p>Woodpecker CI plugin to trigger repository builds or deployments. This plugin is a fork of <a href=\\"https://github.com/drone-plugins/drone-downstream/\\">drone-plugins/drone-downstream</a>.</p>\\n<h2 id=\\"features\\">Features</h2>\\n<ul>\\n<li>Trigger one or multiple pipelines</li>\\n<li>Trigger deploy action</li>\\n<li>Pass variables to pipelines</li>\\n</ul>\\n<h2 id=\\"settings\\">Settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Settings Name</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>server</code></td>\\n<td>current server</td>\\n<td>sets Woodpecker CI server URL to call</td>\\n</tr>\\n<tr>\\n<td><code>token</code></td>\\n<td><em>none</em></td>\\n<td>sets Woocpecker CI API token for server</td>\\n</tr>\\n<tr>\\n<td><code>repositories</code></td>\\n<td><em>none</em></td>\\n<td>sets repositories name whose pipelines to trigger</td>\\n</tr>\\n<tr>\\n<td><code>deploy</code></td>\\n<td><em>none</em></td>\\n<td>sets the environment to deploy to</td>\\n</tr>\\n<tr>\\n<td><code>params</code></td>\\n<td><em>none</em></td>\\n<td>sets list of params (key=value or file paths of params) to pass to triggered builds</td>\\n</tr>\\n<tr>\\n<td><code>params-from-env</code></td>\\n<td><em>none</em></td>\\n<td>sets list of environment variables to pass to triggered builds</td>\\n</tr>\\n<tr>\\n<td><code>wait</code></td>\\n<td><code>false</code></td>\\n<td>sets to wait for any currently running builds to finish</td>\\n</tr>\\n<tr>\\n<td><code>timeout</code></td>\\n<td><code>60s</code></td>\\n<td>sets how long to wait on any currently running builds</td>\\n</tr>\\n<tr>\\n<td><code>last-successful</code></td>\\n<td><code>false</code></td>\\n<td>sets to trigger last successful build</td>\\n</tr>\\n</tbody></table>\\n<h3 id=\\"repositories\\">repositories</h3>\\n<p>Multiple repositories whose pipelines need to be triggered can be provided.\\nAlso it&#39;s possible to provide specific branch to trigger can be specified with <code>@</code> separator, ex. <code>owner/repo@branch</code>.</p>\\n<h2 id=\\"examples\\">Examples</h2>\\n<pre><code class=\\"language-yaml\\">  trigger-downstream:\\n    image: woodpeckerci/plugin-trigger\\n    settings:\\n      repositories:\\n        - octocat/hello-world@master\\n        - octocat/sample\\n      token:\\n        from_secret: woodpecker_token\\n</code></pre>\\n<pre><code class=\\"language-yaml\\">  publish:\\n    image: woodpeckerci/plugin-trigger\\n    settings:\\n      repositories:\\n        - octocat/hello-world\\n      deploy: production\\n      params:\\n        - DATABASE=prod\\n      wait: true\\n      token:\\n        from_secret: woodpecker_token\\n    when:\\n      branch: ${CI_REPO_DEFAULT_BRANCH}\\n      event: push\\n</code></pre>\\n","tags":["woodpecker","trigger","pipeline"],"containerImage":"woodpeckerci/plugin-trigger","containerImageUrl":"https://hub.docker.com/r/woodpeckerci/plugin-trigger","verified":true},{"name":"Gitea Release","url":"https://codeberg.org/woodpecker-plugins/gitea-release","icon":"https://raw.githubusercontent.com/go-gitea/gitea/main/assets/logo.svg","description":"Plugin to create a Gitea release","docs":"<p>Woodpecker CI plugin to create a Gitea release. This plugin is a fork of <a href=\\"https://github.com/drone-plugins/drone-gitea-release\\">drone-gitea-release</a>.</p>\\n<h2 id=\\"settings\\">Settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Settings Name</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>api-key</code></td>\\n<td><em>none</em></td>\\n<td>API key for Gitea</td>\\n</tr>\\n<tr>\\n<td><code>files</code></td>\\n<td><em>none</em></td>\\n<td>List of files to upload</td>\\n</tr>\\n<tr>\\n<td><code>file-exists</code></td>\\n<td><code>overwrite</code></td>\\n<td>What to do if files already exist; one of <code>overwrite</code>, <code>fail</code>, or <code>skip</code></td>\\n</tr>\\n<tr>\\n<td><code>checksum</code></td>\\n<td><em>none</em></td>\\n<td>Generate checksums for specific files</td>\\n</tr>\\n<tr>\\n<td><code>draft</code></td>\\n<td><code>false</code></td>\\n<td>Create a draft release</td>\\n</tr>\\n<tr>\\n<td><code>skip-verify</code></td>\\n<td><code>false</code></td>\\n<td>Visit <code>base-url</code> and skip verifying certificate</td>\\n</tr>\\n<tr>\\n<td><code>prerelease</code></td>\\n<td><code>false</code></td>\\n<td>Create a pre-release</td>\\n</tr>\\n<tr>\\n<td><code>base-url</code></td>\\n<td><em>none</em></td>\\n<td>Base URL of Gitea instance</td>\\n</tr>\\n<tr>\\n<td><code>notes</code></td>\\n<td><em>none</em></td>\\n<td>File or string with notes for the release (ex: changelog)</td>\\n</tr>\\n<tr>\\n<td><code>title</code></td>\\n<td><em>none</em></td>\\n<td>File or string with the title for the release</td>\\n</tr>\\n<tr>\\n<td><code>env-file</code></td>\\n<td><em>none</em></td>\\n<td>Path to a <code>.env</code> file to load</td>\\n</tr>\\n</tbody></table>\\n<h2 id=\\"example\\">Example</h2>\\n<pre><code class=\\"language-yaml\\">  publish:\\n    image: woodpeckerci/plugin-gitea-release\\n    settings:\\n        base_url: https://codeberg.org\\n        files:\\n          - &quot;hello-world&quot;\\n          - &quot;hello-world.exe&quot;\\n        api_key:\\n          from_secret: API_KEY\\n</code></pre>\\n","tags":["Gitea","publish"],"containerImage":"woodpeckerci/plugin-gitea-release","containerImageUrl":"https://hub.docker.com/r/woodpeckerci/plugin-gitea-release","verified":true},{"name":"Woodpecker Email","url":"https://gitnet.fr/deblan/woodpecker-email","icon":"https://gitnet.fr/deblan/woodpecker-email/raw/branch/develop/logo.svg","description":"plugin to send build status notifications via Email.","docs":"<p>Use the Email plugin for sending build status notifications via email.</p>\\n<h2 id=\\"config\\">Config</h2>\\n<p>You can configure the plugin using the following parameters:</p>\\n<ul>\\n<li><strong>from.address</strong> - Send notifications from this address</li>\\n<li><strong>from.name</strong> - Notifications sender name</li>\\n<li><strong>host</strong> - SMTP server host</li>\\n<li><strong>port</strong> - SMTP server port, defaults to <code>587</code></li>\\n<li><strong>username</strong> - SMTP username</li>\\n<li><strong>password</strong> - SMTP password</li>\\n<li><strong>skip_verify</strong> - Skip verification of SSL certificates, defaults to <code>false</code></li>\\n<li><strong>no_starttls</strong> - Enable/Disable STARTTLS</li>\\n<li><strong>recipients</strong> - List of recipients to send this mail to (besides the commit author)</li>\\n<li><strong>recipients_file</strong> - Filename to load additional recipients from (textfile with one email per line) (besides the commit author)</li>\\n<li><strong>recipients_only</strong> - Do not send mails to the commit author, but only to <strong>recipients</strong>, defaults to <code>false</code></li>\\n<li><strong>subject</strong> - The subject line template</li>\\n<li><strong>body</strong> - The email body template</li>\\n<li><strong>attachment</strong> - An optional file to attach to the sent mail(s), can be an absolute path or relative to the working directory.</li>\\n<li><strong>evaluate</strong> - An optional expression to evaluate (on the fly) whether the mail should be sent or not (<a href=\\"https://woodpecker-ci.org/docs/next/usage/pipeline-syntax#evaluate\\">https://woodpecker-ci.org/docs/next/usage/pipeline-syntax#evaluate</a>).</li>\\n</ul>\\n<h2 id=\\"example\\">Example</h2>\\n<p>The following is a sample configuration in your .woodpecker.yml file:</p>\\n<pre><code class=\\"language-yaml\\">pipeline:\\n  mail:\\n    image: deblan/woodpecker-email\\n    settings:\\n      from.address: noreply@github.com\\n      from.name: John Smith\\n      host: smtp.mailgun.org\\n      username: octocat\\n      password: 12345\\n      recipients:\\n        - octocat@github.com\\n</code></pre>\\n<h3 id=\\"secrets\\">Secrets</h3>\\n<p>The Email plugin supports reading credentials and other parameters from the Drone secret store. This is strongly recommended instead of storing credentials in the pipeline configuration in plain text.</p>\\n<pre><code class=\\"language-diff\\">pipeline:\\n  mail:\\n    image: deblan/woodpecker-email\\n    settings:\\n      from.address: noreply@github.com\\n      host: smtp.mailgun.org\\n+     username:\\n+       from_secret: email_username\\n+     password: 12345\\n+       from_secret: email_password\\n      recipients:\\n        - octocat@github.com\\n</code></pre>\\n<h3 id=\\"evaluation\\">Evaluation</h3>\\n<p>This plugin introduces an optional expression to evaluate (on the fly) whether the mail should be sent or not.</p>\\n<pre><code class=\\"language-diff\\">pipeline:\\n  mail:\\n    image: deblan/woodpecker-email\\n    settings:\\n      ...\\n    when:\\n      - evaluate: &#39;CI_STEP_STATUS == &quot;failure&quot; || CI_PREV_PIPELINE_STATUS == &quot;failure&quot;&#39;\\n</code></pre>\\n<p>The problem is that the expression is evaluated before the pipeline is generated. In this case, <code>CI_STEP_STATUS</code> does not exist yet and the mail step is ignored unless the previous pipeline failed.</p>\\n<pre><code class=\\"language-diff\\">pipeline:\\n  mail:\\n    image: deblan/woodpecker-email\\n    settings:\\n      ...\\n+     evaluate: &#39;CI_STEP_STATUS == &quot;failure&quot; || CI_PREV_PIPELINE_STATUS == &quot;failure&quot;&#39;\\n    when:\\n-     - evaluate: &#39;CI_STEP_STATUS == &quot;failure&quot; || CI_PREV_PIPELINE_STATUS == &quot;failure&quot;&#39;\\n</code></pre>\\n<p>More information about the syntaxe on (<a href=\\"https://woodpecker-ci.org/docs/next/usage/pipeline-syntax#evaluate\\">https://woodpecker-ci.org/docs/next/usage/pipeline-syntax#evaluate</a>).</p>\\n<h3 id=\\"custom-templates\\">Custom Templates</h3>\\n<p>In some cases you may want to customize the look and feel of the email message\\nso you can use custom templates. For the use case we expose the following\\nadditional parameters, all of the accept a custom handlebars template, directly\\nprovided as a string or as a remote URL which gets fetched and parsed:</p>\\n<ul>\\n<li><strong>subject</strong> - A handlebars template to create a custom subject. For more\\ndetails take a look at the <a href=\\"http://handlebarsjs.com/\\">docs</a>. You can see the\\ndefault template <a href=\\"https://github.com/Drillster/drone-email/blob/master/defaults.go#L14\\">here</a></li>\\n<li><strong>body</strong> - A handlebars template to create a custom template. For more\\ndetails take a look at the <a href=\\"http://handlebarsjs.com/\\">docs</a>. You can see the\\ndefault template <a href=\\"https://github.com/Drillster/drone-email/blob/master/defaults.go#L19-L267\\">here</a></li>\\n</ul>\\n<p>Example configuration that generate a custom email:</p>\\n<pre><code class=\\"language-yaml\\">pipeline:\\n  mail:\\n    image: deblan/woodpecker-email\\n    settings:\\n      from.address: noreply@github.com\\n      host: smtp.mailgun.org\\n      username: octocat\\n      password: 12345\\n      subject: &gt;\\n        [{{ build.status }}]\\n        {{ repo.owner }}/{{ repo.name }}\\n        ({{ build.branch }} - {{ truncate build.commit 8 }})\\n      body:\\n        https://git.io/vgvPz\\n</code></pre>\\n<h3 id=\\"skip-ssl-verify\\">Skip SSL verify</h3>\\n<p>In some cases you may want to skip SSL verification, even if we discourage that\\nas it leads to an unsecure environment. Please use this option only within your\\nintranet and/or with truested resources. For this use case we expose the\\nfollowing additional parameter:</p>\\n<ul>\\n<li><strong>skip_verify</strong> - Skip verification of SSL certificates</li>\\n</ul>\\n<p>Example configuration that skips SSL verification:</p>\\n<pre><code class=\\"language-diff\\">pipeline:\\n  mail:\\n    image: deblan/woodpecker-email\\n    settings:\\n      from: noreply@github.com\\n      host: smtp.mailgun.org\\n      username: octocat\\n      password: 12345\\n+     skip_verify: true\\n</code></pre>\\n<h3 id=\\"starttls\\">STARTTLS</h3>\\n<p>By default, STARTTLS is being used opportunistically meaning, if advertised\\nby the server, traffic is going to be encrypted.</p>\\n<p>You may want to disable STARTTLS, e.g., with faulty and/or internal servers:</p>\\n<pre><code class=\\"language-diff\\">pipeline:\\n  mail:\\n    image: deblan/woodpecker-email\\n    settings:\\n      from: noreply@github.com\\n      host: smtp.mailgun.org\\n      username: octocat\\n      password: 12345\\n+     no_starttls: true\\n</code></pre>\\n","tags":["notifications","email"],"containerImage":"deblan/woodpecker-email","containerImageUrl":"https://hub.docker.com/r/deblan/woodpecker-email","verified":false}]')}}]);