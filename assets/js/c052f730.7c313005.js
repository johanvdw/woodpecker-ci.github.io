"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[503],{17942:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>g});var t=a(50959);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=t.createContext({}),c=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},p=function(e){var n=c(e.components);return t.createElement(i.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),u=r,g=d["".concat(i,".").concat(u)]||d[u]||m[u]||s;return a?t.createElement(g,o(o({ref:n},p),{},{components:a})):t.createElement(g,o({ref:n},p))}));function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=u;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=a[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},85776:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>f,contentTitle:()=>v,default:()=>O,frontMatter:()=>g,metadata:()=>b,toc:()=>h});var t=a(17942),r=Object.defineProperty,s=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,n,a)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,d=(e,n)=>{for(var a in n||(n={}))i.call(n,a)&&p(e,a,n[a]);if(l)for(var a of l(n))c.call(n,a)&&p(e,a,n[a]);return e},m=(e,n)=>s(e,o(n)),u=(e,n)=>{var a={};for(var t in e)i.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&l)for(var t of l(e))n.indexOf(t)<0&&c.call(e,t)&&(a[t]=e[t]);return a};const g={},v="Advanced usage",b={unversionedId:"usage/advanced-usage",id:"usage/advanced-usage",title:"Advanced usage",description:"Advanced YAML syntax",source:"@site/docs/20-usage/90-advanced-usage.md",sourceDirName:"20-usage",slug:"/usage/advanced-usage",permalink:"/docs/next/usage/advanced-usage",draft:!1,editUrl:"https://github.com/woodpecker-ci/woodpecker/edit/main/docs/docs/20-usage/90-advanced-usage.md",tags:[],version:"current",sidebarPosition:90,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Status Badges",permalink:"/docs/next/usage/badges"},next:{title:"Setup",permalink:"/docs/next/administration/setup"}},f={},h=[{value:"Advanced YAML syntax",id:"advanced-yaml-syntax",level:2},{value:"Anchors &amp; aliases",id:"anchors--aliases",level:3},{value:"Map merges and overwrites",id:"map-merges-and-overwrites",level:3},{value:"Sequence merges",id:"sequence-merges",level:3},{value:"References",id:"references",level:3},{value:"Persisting environment data between steps",id:"persisting-environment-data-between-steps",level:2},{value:"Declaring global variables in <code>docker-compose.yml</code>",id:"declaring-global-variables-in-docker-composeyml",level:2}],y={toc:h},k="wrapper";function O(e){var n=e,{components:a}=n,r=u(n,["components"]);return(0,t.kt)(k,m(d(d({},y),r),{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",d({},{id:"advanced-usage"}),"Advanced usage"),(0,t.kt)("h2",d({},{id:"advanced-yaml-syntax"}),"Advanced YAML syntax"),(0,t.kt)("p",null,"YAML has some advanced syntax features that can be used like variables to reduce duplication in your pipeline config:"),(0,t.kt)("h3",d({},{id:"anchors--aliases"}),"Anchors & aliases"),(0,t.kt)("p",null,"You can use ",(0,t.kt)("a",d({parentName:"p"},{href:"https://yaml.org/spec/1.2.2/#3222-anchors-and-aliases"}),"YAML anchors & aliases")," as variables in your pipeline config."),(0,t.kt)("p",null,"To convert this:"),(0,t.kt)("pre",null,(0,t.kt)("code",d({parentName:"pre"},{className:"language-yml"}),"steps:\n  test:\n    image: golang:1.18\n    commands: go test ./...\n  build:\n    image: golang:1.18\n    commands: build\n")),(0,t.kt)("p",null,"Just add a new section called ",(0,t.kt)("strong",{parentName:"p"},"variables")," like this:"),(0,t.kt)("pre",null,(0,t.kt)("code",d({parentName:"pre"},{className:"language-diff"}),"+variables:\n+  - &golang_image 'golang:1.18'\n\n steps:\n   test:\n-    image: golang:1.18\n+    image: *golang_image\n     commands: go test ./...\n   build:\n-    image: golang:1.18\n+    image: *golang_image\n     commands: build\n")),(0,t.kt)("h3",d({},{id:"map-merges-and-overwrites"}),"Map merges and overwrites"),(0,t.kt)("pre",null,(0,t.kt)("code",d({parentName:"pre"},{className:"language-yaml"}),"variables:\n  - &base-plugin-settings\n    target: dist\n    recursive: false\n    try: true\n  - &special-setting\n    special: true\n  - &some-plugin codeberg.org/6543/docker-images/print_env\n\nsteps:\n  develop:\n    image: *some-plugin\n    settings:\n      <<: [*base-plugin-settings, *special-setting] # merge two maps into an empty map\n    when:\n      branch: develop\n\n  main:\n    image: *some-plugin\n    settings:\n      <<: *base-plugin-settings # merge one map and ...\n      try: false # ... overwrite original value\n      ongoing: false # ... adding a new value\n    when:\n      branch: main\n")),(0,t.kt)("h3",d({},{id:"sequence-merges"}),"Sequence merges"),(0,t.kt)("pre",null,(0,t.kt)("code",d({parentName:"pre"},{className:"language-yaml"}),"variables:\n  pre_cmds: &pre_cmds\n   - echo start\n   - whoami\n  post_cmds: &post_cmds\n   - echo stop\n  hello_cmd: &hello_cmd\n   - echo hello\n\nsteps:\n  step1:\n    image: debian\n    commands:\n     - <<: *pre_cmds # prepend a sequence\n     - echo exec step now do dedicated things\n     - <<: *post_cmds # append a sequence\n  step2:\n    image: debian\n    commands:\n     - <<: [*pre_cmds, *hello_cmd] # prepend two sequences\n     - echo echo from second step\n     - <<: *post_cmds\n")),(0,t.kt)("h3",d({},{id:"references"}),"References"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",d({parentName:"li"},{href:"https://yaml.org/spec/1.2.2/#3222-anchors-and-aliases"}),"Official YAML specification")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",d({parentName:"li"},{href:"https://learnxinyminutes.com/docs/yaml"}),"YAML Cheatsheet"))),(0,t.kt)("h2",d({},{id:"persisting-environment-data-between-steps"}),"Persisting environment data between steps"),(0,t.kt)("p",null,"One can create a file containing environment variables, and then source it in each step that needs them."),(0,t.kt)("pre",null,(0,t.kt)("code",d({parentName:"pre"},{className:"language-yml"}),'steps:\n  init:\n    image: bash\n    commands:\n      echo "FOO=hello" >> envvars\n      echo "BAR=world" >> envvars\n\n  debug:\n    image: bash\n    commands:\n      - source envvars\n      - echo $FOO\n')),(0,t.kt)("h2",d({},{id:"declaring-global-variables-in-docker-composeyml"}),"Declaring global variables in ",(0,t.kt)("inlineCode",{parentName:"h2"},"docker-compose.yml")),(0,t.kt)("p",null,"As described in ",(0,t.kt)("a",d({parentName:"p"},{href:"/docs/next/usage/environment#global-environment-variables"}),"Global environment variables"),", one can define global variables:"),(0,t.kt)("pre",null,(0,t.kt)("code",d({parentName:"pre"},{className:"language-yml"}),"services:\n  woodpecker-server:\n    # ...\n    environment:\n      - WOODPECKER_ENVIRONMENT=first_var:value1,second_var:value2\n      # ...\n")),(0,t.kt)("p",null,"Note that this tightly couples the server and app configurations (where the app is a completely separate application). But this is a good option for truly global variables which should apply to all steps in all pipelines for all apps."))}O.isMDXComponent=!0}}]);